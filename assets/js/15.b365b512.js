(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{371:function(n,t,e){"use strict";e.r(t);var o=e(44),r=Object(o.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"模板模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#模板模式"}},[n._v("#")]),n._v(" 模板模式")]),n._v(" "),e("h2",{attrs:{id:"模板方法模式的定义和组成"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#模板方法模式的定义和组成"}},[n._v("#")]),n._v(" 模板方法模式的定义和组成")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("模板方法模式是一种只需使用继承就可以实现的简单模式。\n通过模板方法模式，我们在父类中封装了子类的算法框架，这些算法框架在正常状态下是适用于大多数子类，如果有一些特别个性的子类，我们就需要加入hook来解决这个问题；\n抽象类的实现\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("var Beverage = function(){};\nBeverage.prototype.boilWater = function(){\n\tconsole.log('把水烧开！')\n}\nBeverage.prototype.brew = function(){\n\tthrow new Error('子类必须重写brew方法！')\n}\nBeverage.prototype.pourInCup = function(){\n\tthrow new Error('子类必须重写pourInCup方法！')\n}\nBeverage.prototype.addCondiments = function(){\n\tthrow new Error('子类必须重写addCondiments方法！');\n}\nBeverage.prototype.customerWantsCondiments = function(){\n\treturn true;\n}\nBeverage.prototype.init = function () {\n\tthis.boilWater();\n\tthis.brew();\n\tthis.pourInCup();\n\tif(this.customerWantsCondiments) {\n\t\tthis.addCondiments();\n\t}\n}\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("具体方法的实现\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("var CoffeeWithHook = function(){};\nCoffeeWithHook.prototype.brew = function(){\n\tconsole.log('冲咖啡！')\n};\nCoffeeWithHook.prototype.pourInCup = function(){\n\tconsole.log('把咖啡倒进杯子中！')\n};\nCoffeeWithHook.prototype.addCondiments = function(){\n\tconsole.log('加添加剂！')\n};\nCoffeeWithHook.prototype.customerWantsCondiments = function(){\n\treturn window.confirm('请问需要调料吗？');\n}\nvar coffeeWithHook = new CoffeeWithHook();\ncoffeeWithHook.init();\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("不使用继承来实现模板模式\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("var Beverage = function (params) {\n\tvar boilWater = function(){\n\t\tconsole.log('把水煮沸！');\n\t};\n\tvar brew = params.brew || function(){\n\t\tthrow new Error('必须传递brew方法！');\n\t};\n\tvar pourInCup = params.pourInCup || function(){\n\t\tthrow new Error('必须传递pourInCup方法！');\n\t};\n\tvar addCondiments = params.addCondiments || function(){\n\t\tthrow new Error('必须传递addCondiments方法！');\n\t};\n\tvar F = function(){};\n\tF.prototype.init = function(){\n\t\tboilWater();\n\t\tbrew();\n\t\tpourInCup();\n\t\taddCondiments();\n\t};\n\treturn F;\n};\nvar Coffee = Beverage({\n\tbrew:function (){\n\t\tconsole.log('brew');\n\t},\n\tpourInCup:funciton (){\n\t\tconsole.log('pourInCup');\n\t},\n\taddCondiments:function(){\n\t\tconsole.log('addCondiments');\n\t}\n});\nvar coffee = new Coffee();\ncoffee.init();\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);